name: Honoua CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  api-tests:
    name: API tests (Pester + mini charge)
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: honoua
          POSTGRES_USER: honou
          POSTGRES_PASSWORD: Honou2035Lg!
        ports: ['5432:5432']
        # Santé Postgres
        options: >-
          --health-cmd="pg_isready -U honou -d honoua"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    steps:
      # 1) Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install uvicorn fastapi psycopg2-binary

      # 3) Attendre Postgres + bootstrap DB minimal
      - name: Install psql client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Wait for Postgres
        - name: Wait for /health
  run: |
    for i in {1..60}; do
      if curl -sf http://127.0.0.1:8000/health > /dev/null; then
        echo "API is up"; exit 0
      fi
      echo "Waiting API..."
      sleep 2
    done
    echo "API did not start" && (tail -n 200 api.log || true) && exit 1


      - name: Bootstrap DB (schema minimal pour tests)
        run: |
          cat > /tmp/bootstrap.sql <<'SQL'
          CREATE TABLE IF NOT EXISTS products (
            id SERIAL PRIMARY KEY,
            ean13 VARCHAR(14),
            product_name TEXT,
            category TEXT,
            carbon_product_kgco2e NUMERIC,
            carbon_pack_kgco2e NUMERIC
          );
          INSERT INTO products (ean13, product_name, category, carbon_product_kgco2e, carbon_pack_kgco2e) VALUES
            ('3216549870123','Eau minérale 1L','Boissons, Eau',0.05,0.02),
            ('1234567890128','Limonade 50cl','Boissons sucrés, Limonade',0.4,0.08),
            ('7612345000001','Yaourt nature 4x125g','Produits laitiers, Yaourt',1.2,0.15);

          CREATE OR REPLACE VIEW v_products_clean AS
            SELECT ean13 AS ean, product_name, category FROM products;

          CREATE MATERIALIZED VIEW IF NOT EXISTS mv_metrics_category AS
            SELECT category, COUNT(*)::INT AS count FROM products GROUP BY category;
          REFRESH MATERIALIZED VIEW mv_metrics_category;
          SQL

          PGPASSWORD=honou psql -h localhost -U honou -d honoua -f /tmp/bootstrap.sql

      # 4) Démarrer l'API
      - name: Start API (background)
        run: |
          export DATABASE_URL="postgresql://honou:honou@localhost:5432/honoua"
          export HONOUA_DB_URL="$DATABASE_URL"
          nohup uvicorn app.main:app --host 0.0.0.0 --port 8000 > api.log 2>&1 & echo $! > api.pid

      - name: Wait for /health
        run: |
          for i in {1..60}; do
            if curl -sf http://localhost:8000/health > /dev/null; then
              echo "API is up"; exit 0
            fi
            echo "Waiting API..."
            sleep 2
          done
          echo "API did not start" && (tail -n 200 api.log || true) && exit 1

      # 5) PowerShell + Pester
      - name: Setup PowerShell & Pester
        run: |
          pwsh -NoLogo -NoProfile -Command "Set-PSRepository -Name PSGallery -InstallationPolicy Trusted; Install-Module Pester -Force -Scope CurrentUser"

      - name: Run Pester (JUnit export)
  run: |
    pwsh -NoLogo -NoProfile -Command "
      $env:HONOUA_BASEURL = 'http://127.0.0.1:8000';
      $cfg = New-PesterConfiguration;
      $cfg.Run.Path = 'tests/pester';
      $cfg.Run.Exit = $true;
      $cfg.Output.Verbosity = 'Detailed';
      $cfg.TestResult.Enabled = $true;
      New-Item -ItemType Directory -Force -Path 'reports' | Out-Null;
      $cfg.TestResult.OutputPath = 'reports/pester-results.xml';
      $cfg.TestResult.OutputFormat = 'NUnitXml';
      Invoke-Pester -Configuration $cfg
    "


      - name: Upload Pester report
        uses: actions/upload-artifact@v4
        with:
          name: pester-report
          path: reports/pester-results.xml
          if-no-files-found: warn

      # 6) Mini test de charge (avec seuils)
      - name: Run Load Test
        run: |
          pwsh -NoLogo -NoProfile -Command "
            cd tests/load;
            ./LoadTest-HonouaApi.ps1 -BaseUrl 'http://localhost:8000' -Endpoint '/products' -Requests 120 -Concurrency 10 -Limit 50 -MaxP95Ms 800 -MaxErrorRate 2
          "

      - name: Upload LoadTest CSVs
        uses: actions/upload-artifact@v4
        with:
          name: loadtest-reports
          path: tests/load/reports/*.csv
          if-no-files-found: warn

      # 7) Logs utiles en cas d'échec
      - name: Show API logs (on failure)
        if: failure()
        run: |
          echo "---- api.log ----"
          tail -n 300 api.log || true
