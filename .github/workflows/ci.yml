name: CI

on:
  push:
    branches: ["main"]
  pull_request:
  workflow_dispatch:

jobs:
  honoua-ci:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: honoua
          POSTGRES_PASSWORD: HonouaDev_2025
          POSTGRES_DB: honoua
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U honoua -d honoua"
          --health-interval=10s --health-timeout=5s --health-retries=10


    env:
      BASE_URL: http://127.0.0.1:3000
      PGHOST: 127.0.0.1
      PGPORT: 5432
      PGUSER: honoua
      PGDATABASE: honoua
      PGPASSWORD: HonouaDev_2025



    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (uvicorn/fastapi + psql client)
     run: |
       python -m pip install --upgrade pip
       pip install uvicorn fastapi
       sudo apt-get update
       sudo apt-get install -y postgresql-client


      - name: Start mini API (ci_main)
        run: |
          nohup uvicorn app.ci_main:app --host 127.0.0.1 --port 3000 > api.log 2>&1 &
          for i in {1..40}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" $BASE_URL/health || true)
            if [ "$code" = "200" ]; then
              echo "API healthy (HTTP 200)"; exit 0
            fi
            sleep 1
          done
          echo "API NOT healthy (health != 200). api.log below:"
          tail -n 200 api.log || true
          exit 1
          - name: Wait for Postgres (health + ping)
     env:
       PGPASSWORD: ${{ env.PGPASSWORD }}
     run: |
       for i in {1..60}; do
         if pg_isready -h $PGHOST -p $PGPORT -d $PGDATABASE -U $PGUSER; then
           echo "Postgres is ready"; break
         fi
         sleep 1
       done
       psql "postgresql://$PGUSER:$PGPASSWORD@$PGHOST:$PGPORT/$PGDATABASE" -tAc "SELECT 1;"


      - name: Install Pester
        shell: pwsh
        run: Install-Module Pester -Scope CurrentUser -Force

      - name: Run Pester - Preflight (4 tests)
        shell: pwsh
        env:
          BASE_URL: ${{ env.BASE_URL }}
        run: |
          Write-Host ">> Preflight step â€” BASE_URL in step: $env:BASE_URL"
          $resp = curl -s -o /dev/null -w "%{http_code}" "$env:BASE_URL/health"
          Write-Host ">> curl check before Pester: HTTP $resp"
          Invoke-Pester -Path ./tests/pester/Preflight.Tests.ps1 -CI -Output Detailed

      - name: Show API logs on failure
        if: failure()
        run: |
          echo "== api.log (tail) ==" && tail -n 200 api.log || true
