name: CI

on:
  push:
    branches: ["main"]
  pull_request:
  workflow_dispatch:

jobs:
  honoua-ci:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: honoua
          POSTGRES_PASSWORD: HonouaDev_2025
          POSTGRES_DB: honoua
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U honoua -d honoua"
          --health-interval=10s --health-timeout=5s --health-retries=10

    env:
      BASE_URL: http://127.0.0.1:3000
      PGHOST: 127.0.0.1
      PGPORT: 5432
      PGUSER: honoua
      PGDATABASE: honoua
      PGPASSWORD: HonouaDev_2025

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (uvicorn/fastapi + psql client)
        run: |
          python -m pip install --upgrade pip
          pip install uvicorn fastapi
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Start mini API (ci_main)
        run: |
          nohup uvicorn app.ci_main:app --host 127.0.0.1 --port 3000 > api.log 2>&1 &
          for i in {1..40}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/health" || true)
            if [ "$code" = "200" ]; then
              echo "API healthy (HTTP 200)"; exit 0
            fi
            sleep 1
          done
          echo "API NOT healthy (health != 200). api.log below:"
          tail -n 200 api.log || true
          exit 1

      - name: Wait for Postgres (health + ping)
        env:
          PGPASSWORD: ${{ env.PGPASSWORD }}
        run: |
          for i in {1..60}; do
            if pg_isready -h "$PGHOST" -p "$PGPORT" -d "$PGDATABASE" -U "$PGUSER"; then
              echo "Postgres is ready"; break
            fi
            sleep 1
          done
          psql "postgresql://$PGUSER:$PGPASSWORD@$PGHOST:$PGPORT/$PGDATABASE" -tAc "SELECT 1;"

      # --- Debug avant les tests DB ---
      - name: Debug preflight for DB tests
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          Write-Host "=== Vérif fichier de test ==="
          if (Test-Path 'tests/pester/Db.Connect.Tests.ps1') {
            Get-Item 'tests/pester/Db.Connect.Tests.ps1' | Format-List FullName, Length, LastWriteTime
          } else {
            throw "Fichier de test introuvable: tests/pester/Db.Connect.Tests.ps1"
          }

          Write-Host "`n=== Variables PG* (sans mot de passe) ==="
          Write-Output ("PGHOST={0}" -f $env:PGHOST)
          Write-Output ("PGPORT={0}" -f $env:PGPORT)
          Write-Output ("PGUSER={0}" -f $env:PGUSER)
          Write-Output ("PGDATABASE={0}" -f $env:PGDATABASE)
          Write-Output "PGPASSWORD=(masqué)"

          Write-Host "`n=== Outils Postgres ==="
          psql --version
          pg_isready --version

          Write-Host "`n=== Santé Postgres (pg_isready) ==="
          pg_isready -h "$env:PGHOST" -p "$env:PGPORT" -d "$env:PGDATABASE" -U "$env:PGUSER"

          Write-Host "`n=== Ping SQL (SELECT 1) ==="
          psql "host=$env:PGHOST port=$env:PGPORT dbname=$env:PGDATABASE user=$env:PGUSER password=$env:PGPASSWORD sslmode=disable" -c "SELECT 1;"

          Write-Host "`n=== Pester version ==="
          try {
            Import-Module Pester -ErrorAction Stop
          } catch {
            Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
            Install-Module Pester -Scope CurrentUser -Force -SkipPublisherCheck -Confirm:$false
            Import-Module Pester
          }
          (Get-Module Pester).Version

      - name: Run Pester DB tests (Db.Connect.Tests.ps1)
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          # Pester 5
          Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
          Install-Module Pester -Scope CurrentUser -Force -SkipPublisherCheck -Confirm:$false
          Import-Module Pester

          New-Item -ItemType Directory -Force -Path TestResults | Out-Null

          $result = Invoke-Pester `
            -Path 'tests/pester/Db.Connect.Tests.ps1' `
            -OutputFormat NUnitXml `
            -OutputFile 'TestResults/Db.Connect.TestResults.xml' `
            -PassThru

          # Résumé minimal + fichier texte
          $summary = "Passed: {0} | Failed: {1} | Skipped: {2}" -f $result.PassedCount, $result.FailedCount, $result.SkippedCount
          $summary | Tee-Object -FilePath TestResults/summary.txt | Out-Null

          # Step Summary GitHub (sans here-strings)
          if ($env:GITHUB_STEP_SUMMARY) {
            $lines = @(
              "### Db.Connect.Tests.ps1 — Pester summary"
              ("- Passed: {0}" -f $result.PassedCount)
              ("- Failed: {0}" -f $result.FailedCount)
              ("- Skipped: {0}" -f $result.SkippedCount)
            ) -join [Environment]::NewLine
            $lines | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
          }

          if ($result.FailedCount -gt 0) {
            throw "One or more DB tests failed."
          }
      - name: Run Pester DB Smoke tests (Db.Smoke.Tests.ps1)
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
          Install-Module Pester -Scope CurrentUser -Force -SkipPublisherCheck -Confirm:$false
          Import-Module Pester

          New-Item -ItemType Directory -Force -Path TestResults | Out-Null

          $result = Invoke-Pester `
            -Path 'tests/pester/Db.Smoke.Tests.ps1' `
            -OutputFormat NUnitXml `
            -OutputFile 'TestResults/Db.Smoke.TestResults.xml' `
            -PassThru

          $summary = "Passed: {0} | Failed: {1} | Skipped: {2}" -f $result.PassedCount, $result.FailedCount, $result.SkippedCount
          $summary | Tee-Object -FilePath TestResults/Db.Smoke.summary.txt | Out-Null

          if ($env:GITHUB_STEP_SUMMARY) {
            $lines = @(
              "### Db.Smoke.Tests.ps1 — Pester summary"
              ("- Passed: {0}" -f $result.PassedCount)
              ("- Failed: {0}" -f $result.FailedCount)
              ("- Skipped: {0}" -f $result.SkippedCount)
            ) -join [Environment]::NewLine
            $lines | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
          }

          if ($result.FailedCount -gt 0) {
            throw "One or more Smoke DB tests failed."
          }

      - name: Upload Smoke results (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pester-db-smoke
          path: |
            TestResults/Db.Smoke.TestResults.xml
            TestResults/Db.Smoke.summary.txt

      - name: Upload Pester results (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pester-db-tests
          path: |
            TestResults/Db.Connect.TestResults.xml
            TestResults/summary.txt

      # (Optionnel) Pester preflight existant
      - name: Run Pester - Preflight (4 tests)
        shell: pwsh
        env:
          BASE_URL: ${{ env.BASE_URL }}
        run: |
          Write-Host ">> Preflight step — BASE_URL in step: $env:BASE_URL"
          $resp = curl -s -o /dev/null -w "%{http_code}" "$env:BASE_URL/health"
          Write-Host ">> curl check before Pester: HTTP $resp"
          Invoke-Pester -Path ./tests/pester/Preflight.Tests.ps1 -CI -Output Detailed

      - name: Show API logs on failure
        if: failure()
        run: |
          echo "== api.log (tail) ==" && tail -n 200 api.log || true

